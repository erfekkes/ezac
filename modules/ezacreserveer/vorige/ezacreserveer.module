<?php
// $Id$

/***
* EZAC reserveer v7.x-1.0
* 
* Functie: vastlegging reserveringen passagiers
* 
* Aanmaken slot tijden in ezac_resagiers_Slots
* Aanmaken beschikbare dagen in ezac_resagiers_Dagen
* Vastleggen reservering in ezac_resagiers
* Wijzigen en annuleren reserveringen
* Overzicht reserveringen en beschikbare slots
* 
*/

/**
 * Constants and globals
 */
/* already defined in ezacpassagier
define ('VERWIJDER_ITEM', 'Verwijder gemarkeerde item(s)');
define ('VOEG_TOE', 'Voeg toe');
define ('RESERVERING_OPTIE', 'optie');
define ('RESERVERING_BEVESTIGD', 'bevestigd');
define ('OPTIE_TIJD', 3600); //een uur
*/

/**
* Implementation of hook_permission().
*/
function ezacreserveer_permission() {
  return array(
    'ezac_res_view' => array(
      'title' => t('EZAC reserveringen inzage'),
      'description' => t('Bekijken EZAC reserveringen'),
    ),
    'ezac_res_edit' => array(
      'title' => t('EZAC lessen reserveren'),
      'description' => t('Maken EZAC reserveringen'),
    ),
    'ezac_res_delete' => array(
      'title' => t('EZAC reserveringen verwijderen'),
      'description' => t('Verwijderen EZAC reserveringen'),
    ),
    'ezac_res_manage' => array(
      'title' => t('EZAC reservering capaciteit instellen'),
      'description' => t('Instellen EZAC reserveringen'),
    ),
  );
}

/**
* Implements hook_services_resources().
*/
function ezacreserveer_services_resources() {
  $api = array(
   'reserveringen' => array(
      'operations' => array(
        'retrieve' => array( // GET
          'help' => 'Inzage lessen reserveringen',
          'callback' => '_ezacreserveer_retrieve',
          'access callback' => 'user_access',
          'access arguments' => array('access content'), 
          'access arguments append' => FALSE,
          'args' => array(
            array(
              'name' => 'resource_id',
              'type' => 'string',
              'description' => 'resource id',
              'source' => array('path' => '0'), //<id>|<afkorting> of record requested or <*>
              'optional' => FALSE,
              'default value' => '0',
            ),
            array(
              'name' => 'datum', //optional parameter <code>
              'type' => 'string',
              'description' => 'datum',
              'source' => array('param' => 'datum'),
              'optional' => TRUE,
              'default value' => 'VL',
            ),
          ),
        ),
      ),
    ),
  );
  return $api;
}

/**
* Implementation of hook_menu().
*/
function ezacreserveer_menu() {
  $items['reservering'] = array(
      'title' => 'EZAC reservering',
      'description'=> 'EZAC instructie reserveringen',
      'page callback' => '_ezacreserveer_reserveer',
      'page arguments' => '', 
      'access callback' => 'user_access',
      'access arguments' => array('ezac_res_edit'),
      'type' => MENU_NORMAL_ITEM
    ); 
  $items['reservering/reservering'] = array(
      'title' => 'Invoeren reservering',
      'description'=> 'Opgeven instructie',
      'page callback' => '_ezacreserveer_reserveer',
      'page arguments' => '',
      'access callback' => 'user_access',
      'access arguments' => array('ezac_res_edit'),
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => 0,
    );
  $items['reservering/vandaag'] = array(
      'title' => 'Dag',
      'description'=> 'Reserveringen van vandaag',
      'page callback' => '_ezacreserveer_dag',
      'page arguments' => '',
      'access callback' => 'user_access',
      'access arguments' => array('ezac_res_view'),
      'type' => MENU_LOCAL_TASK,
      'weight' => 1, 
    );
  $items['reservering/maand'] = array(
      'title' => 'Maand',
      'description'=> 'Reserveringen per maand',
      'page callback' => '_ezacreserveer_maand',
      'page arguments' => '',
      'access callback' => 'user_access',
      'access arguments' => array('ezac_res_view'),
      'type' => MENU_LOCAL_TASK,
      'weight' => 2,
    );
  $items['reservering/jaar'] = array(
      'title' => 'Jaar',
      'description'=> 'Reserveringen per jaar',
      'page callback' => '_ezacreserveer_jaar',
      'page arguments' => array(2), //jaar of starts record
      'access callback' => 'user_access',
      'access arguments' => array('ezac_res_view'),
      'type' => MENU_LOCAL_TASK,
      'weight' => 3,
    );
  $items['reservering/reserveer'] = array(
      'title' => 'Invoeren reservering',
      'description'=> 'Invoeren reservering',
      'page callback' => '_ezacreserveer_reserveer_input',
      'page arguments' => array(2,3), //datum en tijd
      'access callback' => 'user_access',
      'access arguments' => array('ezac_res_edit'),
      'type' => MENU_CALLBACK,
      'weight' => 4,
  );
  $items['reservering/bevestigen'] = array(
      'title' => 'Bevestiging van reservering',
      'description'=> 'Bevestigen reservering',
      'page callback' => '_ezacreserveer_bevestig',
      'page arguments' => array(2), //id
      'access callback' => 'user_access',
      'access arguments' => array('ezac_res_edit'),
      'type' => MENU_CALLBACK,
      'weight' => 5,
  );
  $items['reservering/resource'] = array(
      'title' => 'Instellen beschikbare kisten',
      'description'=> 'Instellen beschikbare kisten',
      'page callback' => '_ezacreserveer_resource',
      'page arguments' => '',
      'access callback' => 'user_access',
      'access arguments' => array('ezac_res_manage'),
      'type' => MENU_LOCAL_TASK,
      'weight' => 6,
    );
  $items['reservering/capaciteit'] = array(
      'title' => 'Instellen les capaciteit',
      'description'=> 'Instellen les capaciteit per soort',
      'page callback' => '_ezacreserveer_capaciteit',
      'page arguments' => '',
      'access callback' => 'user_access',
      'access arguments' => array('ezac_res_manage'),
      'type' => MENU_LOCAL_TASK,
      'weight' => 7,
    );
  $items['reservering/confirm'] = array(
      'title' => 'Bevestigen',
      'description'=> 'Bevestigen van reservering',
      'page callback' => '_ezacreserveer_confirm',
      'page arguments' => array(2, 3), //id en hash
      'access callback' => 'user_access',
      'access arguments' => array('ezac_res_edit'), 
      'type' => MENU_CALLBACK,
    );
  $items['reservering/delete'] = array(
      'title' => 'Verwijderen',
      'description'=> 'Verwijderen eigen reservering',
      'page callback' => '_ezacreserveer_delete',
      'page arguments' => array(2, 3), //id en hash
      'access callback' => 'user_access',
      'access arguments' => array('ezac_res_delete'), 
      'type' => MENU_CALLBACK,
    );
  $items['reservering/verwijder'] = array(
      'title' => 'Verwijderen',
      'description'=> 'Verwijderen reservering',
      'page callback' => '_ezacreserveer_verwijder',
      'page arguments' => array(2), //id 
      'access callback' => 'user_access',
      'access arguments' => array('ezac_res_view'), // logged-in
      'type' => MENU_CALLBACK,
    );
  return $items;
}


/**
 * web services routines
 */

/**
 * Helper function to verify dates
 * @param string $datum
 * datum to be verified
 * @param string &$datumStart
 * @param string &$datumEnd
 **/
function ezacreserveer_check_datum($datum, &$datumStart, &$datumEnd) {
  //Verify $datum as YYYY-MM-DD, YYYY-MM or YYYY
  $datum_delen = explode('-', $datum);
  switch (strlen($datum)) {
    case 4: //YYYY
        if (!checkdate(01, 01, $datum_delen[0])) {
            $errmsg = 'Invalid value parameter datum YYYY [' .$datum .']';
            return services_error($errmsg, 406);
        }
        $datumStart = $datum .'-01-01';
        $datumEnd   = $datum .'-12-31';
        break;
    case 7: //YYYY-MM
        if (!checkdate($datum_delen[1], 01, $datum_delen[0])) {
            $errmsg = 'Invalid value parameter datum YYYY-MM [' .$datum .']';
            return services_error($errmsg, 406);
        }
        $datumStart = $datum .'-01';
        if     (checkdate($datum_delen[1], 31, $datum_delen[0])) $datumEnd = $datum .'-31';
        elseif (checkdate($datum_delen[1], 30, $datum_delen[0])) $datumEnd = $datum .'-30';
        elseif (checkdate($datum_delen[1], 29, $datum_delen[0])) $datumEnd = $datum .'-29';
        elseif (checkdate($datum_delen[1], 28, $datum_delen[0])) $datumEnd = $datum .'-28';
        break;
    case 10: //YYYY-MM-DD
        if (!checkdate($datum_delen[1], $datum_delen[2], $datum_delen[0])) { //mm dd yyyy
            $errmsg = 'Invalid value parameter datum YYYY-MM-DD [' .$datum .']';
            return services_error($errmsg, 406);
        }
        $datumStart = $datum; // .' 00:00:00');
        $datumEnd   = $datum; // .' 23:59:59');
        break;
    default: //invalid
        $errmsg = 'Invalid length parameter datum [' .$datum .']';
        return services_error($errmsg, 406);
  }
}


/**
* Callback function for reserveringen retrieve
* @param string $resource_id value for reservering record OR datum value in YYYY[-mm[-dd]] format (van:tot)
* @return array xml or json formatted list of ezac_Reservering records
*/
function _ezacreserveer_retrieve($resource_id, $datum) { 
  // Check for mad values
  
  if ($resource_id <> '*') { // select specific record
    if (!is_numeric($resource_id)) {
      $errmsg = 'Id value not allowed [' .$resource_id .']';
      return services_error($errmsg, 406);
    }
    $id = intval($resource_id);
    //return 'zoek op id ' .$id;
    return ezacreserveer_find_items_by_id($id); // select one start record by id
  }
  //$resource_id = *
  
  // required parameters available or default values generated?
  if (!isset($datum) or $datum == NULL) {
        $datum = date('Y-m-d'); //defaults to today as YYYY-MM-DD
        //return services_error('Missing parameter datum', 406);
      }
  
  //if $datum is a range, split and process
  // range is indicated by date:date format
  if (strpos($datum, ':')) {
    $datum_range = explode(':',$datum);
    ezacreserveer_check_datum($datum_range[0], $datumStart, $datumEnd);
    $ds = $datumStart;
    ezacreserveer_check_datum($datum_range[1], $datumStart, $datumEnd);
    $de = $datumEnd;
    return ezacreserveer_find_items_by_date($ds, $de);
  }
  else { //single date
    ezacreserveer_check_datum($datum, $datumStart, $datumEnd);
    return ezacreserveer_find_items_by_date($datumStart, $datumEnd);
  }
}

/**
* Gets reservering records
* @param string $datumStart timestamp
*       lower boundary
* @param string $datumEnd timestamp
*       higher boundary
* @return array
*       list of ezac_Reservering_Reservering records within Datum boundaries
*/
function ezacreserveer_find_items_by_date($datumStart, $datumEnd) {
  // Compose query
  $query = db_select('ezac_Reservering_Reserveringen', 'r');
  $query->join('ezac_Leden', 'l', 'r.leden_id = l.id');
  $query->fields('r', array('id', 'datum', 'periode', 'soort', 'leden_id', 'doel', 'reserve', 'aangemaakt'));
  $query->fields('l', array('voornaam', 'voorvoeg', 'achternaam'));
  $query->condition('r.datum', array($datumStart, $datumEnd), 'BETWEEN');

  $query->orderBy('r.datum', 'ASC');
  $query->orderBy('r.periode', 'ASC');

  $items = $query->execute()->fetchAll(); // TODO apply try.. catch with services_error('text', 406)in callback
  return $items;
} 

/**
* Gets one passagiers record
* @param int $id
*       Id of record selected
* @return array
*       ezac_resagiers record with Id = $id
*/
function ezacreserveer_find_items_by_id($id) {
  // Compose query
  $query = db_select('ezac_Reservering_Reserveringen', 'r');
  $query->join('ezac_Leden', 'l', 'r.leden_id = l.id');
  $query->fields('r', array('id', 'datum', 'periode', 'soort', 'leden_id', 'doel', 'reserve', 'aangemaakt'));
  $query(fields('l', 'voornaam', 'voorvoeg', 'achternaam'));
  $query->condition('p.id', $id, '=');
  $items = $query->execute()->fetchAll(); 
  return $items;
}
 
 
/**
 * Define available resources
 * Elke soort les-kist wordt hier opgegeven
 */
function _ezacreserveer_resource() {
  return drupal_get_form('ezacreserveer_resource_form');
}

/**
 * form for editing of slot list
 */
function ezacreserveer_resource_form($form, &$form_state) {
  // read resources
  $query = db_select('ezac_Reservering_Resources', 'r');
  $query->fields('r',array('id', 'periode', 'resource', 'aantal'));
  $resources = $query->execute()->fetchAll();

  //dpm($resources, 'resources'); //debug
  
  // read periodes
  $query = db_select('ezac_Rooster_Periode', 'p');
  $query->fields('p', array('id', 'periode', 'omschrijving'));
  $periodes = $query->execute()->fetchAll();
  
  if (!empty($periodes)) {
    foreach($periodes as $periode) {
      $periode_list[$periode->periode] = $periode->omschrijving;    
    }
  }
  else $periode_list['algemeen'] = 'gehele dag';
  
  // create intro
  $form[0]['#type'] = 'markup';
  $form[0]['#markup'] = '<p><h2>Instellen soorten lesvliegtuigen</h2></p>';
  $form[0]['#markup'] .= '<p>Capaciteit voor DBO, VVO2, checks, solo en zo</p>';
  $form[0]['#weight'] = 0;
  
  $form['resources'] = array(
    '#type'  => 'fieldlist',
    '#title' => t('Soorten kisten en capaciteit'),
    '#prefix' => '<div id="resource-div">',
    '#suffix' => '</div>',
    '#weight' => 1,
    '#tree' => true,
  );

  //build initial checkbox list
  $i = 0;
  foreach ($resources as $resource) {
    //dpm($resource, 'resource'); //debug
    $resource_name = $resource->resource;
    $aantal = $resource->aantal;
    $periode = $resource->periode;
    $form['resources'][$i] = array(
      '#type'  => 'checkbox',
      '#title' => "Periode $periode, $resource_name, capaciteit $aantal starts",
      '#value' => 0,
      '#tree' => true,
    );
    $form['resources']['resource'][$i] = array(
      '#type'  => 'hidden',
      '#value' => $resource->resource,
      '#tree' => true,
    );
    $i++;
  }

  $form['nr_resources'] = array(
    '#type'  => 'hidden',
    '#title' => t('aantal resources'),
    '#value' => $i,
  );
  
  $form['remove'] = array(
    '#type'  => 'submit',
    '#value' => t(VERWIJDER_ITEM),
    '#prefix' => '<div id="verwijder-div">',
    '#suffix' => '</div>',
    '#weight' => 2,
  );
  
  $form['resource'] = array(
    '#title' => t('Nieuw beschikbaar soort vliegtuig'),
    '#type' => 'textfield',
    '#size' => 20,
    '#default_value' => '', //last time plus 45 minutes
    '#description' => t('Soort lesvliegtuig, zoals DBO, VVO2, solo'),
    '#weight' => 3,
  );
 
  $form['periode'] = array(
    '#title' => t('Periode waarin beschikbaar'),
    '#type' => 'select',
    '#options' => $periode_list,
    '#description' => t('Geef aan voor welke periode de beschikbaarheid geldt'),
    '#weight' => 4,
  );

  $form['aantal'] = array(
    '#title' => t('Aantal starts beschikbaar'),
    '#type' => 'textfield',
    '#size' => 2,
    '#default_value' => '1', //last time plus 45 minutes
    '#description' => t('Totaal aantal starts beschikbaar in genoemde periode'),
    '#weight' => 5,
  );

  $form['submit'] = array(
     '#type' => 'submit',
     '#value' => t(VOEG_TOE),
     '#weight' => 99,
  );
  return $form;
}

/**
 * Validate slot
 * op defines button pressed: "verwijder" or "voeg toe"
 */
function ezacreserveer_resource_form_validate($form, &$form_state) {
  //drupal_set_message('Validate'); //debug
  $op = $form_state['values']['op'];
  
  if ($op == t(VERWIJDER_ITEM)) {
    // geen database actie?
    //drupal_set_message('Verwijderen'); //debug
    $nr_resources = $form_state['input']['nr_resources'];
    //drupal_set_message("nr_slots: $nr_slots");
    for ($i=0; $i < $nr_resources; $i++) {
      if ($i > 20) return; //debug
      $resource = $form_state['input']['resources']['resource'][$i];
      if (!empty($form_state['input']['resources'][$i])) {
        $checked = $form_state['input']['resources'][$i];
      }
      else $checked = false;
      // drupal_set_message("slot $i - tijd:$slot - checked:$checked"); //debug
      //if (form_type_checkbox_value($slot_list)
      if (!empty($form_state['input']['resources']) && $checked) {
        //remove slot and update $slots
        //drupal_set_message('delete slot ' .$form_state['input']['slotlist']['slots'][$i]); //debug
        
        $num_deleted = db_delete('ezac_Reservering_Resources')
        ->condition('resource', $resource)
        ->execute();
        
        if ($num_deleted) {
          drupal_set_message('Kist soort ' .$form_state['input']['resources']['resource'][$i] .' is verwijderd');
        }
      }
    }
    $form_state['rebuild'] = TRUE;
  }
  else { //opvoeren resource
    //drupal_set_message('Validate opvoeren - ' .$op);
    $resource = $form_state['values']['resource'];
    if (empty($resource)) {
      form_set_error('resource', 'Geen kist soort ingevuld');
      return;
    }
    // validate $periode
    
    // validate aantal

    // check whether resource already exists
    $exists = db_select('ezac_Reservering_Resources', 'r')
      ->fields('r', array('resource'))
      ->condition('r.resource', $resource, '=')
      ->execute()->rowCount();
    if ($exists > 0) {
      form_set_error('resource', "Kist soort $resource bestaat al");
      return;
    }
  }
  return;
}

function ezacreserveer_resource_form_submit($form, &$form_state) {
  // create resource in database
  $op = $form_state['values']['op'];
  if ($op == t(VERWIJDER_ITEM)) {
    // geen database actie?
  }
  else { //opvoeren slot
    $resource = $form_state['values']['resource'];
    $periode = $form_state['values']['periode'];
    $aantal  = $form_state['values']['aantal'];
    $invoegen = db_insert('ezac_Reservering_Resources')
    ->fields(array('resource' => $resource, 
                   'periode' => $periode, 
                   'aantal' => $aantal))
    ->execute();
    drupal_set_message("Kist soort $resource toegevoegd");
  }
  return;
}

/**
 * Create capaciteit table for available reservations
 */
function _ezacreserveer_capaciteit() {
  return drupal_get_form('ezacreserveer_capaciteit_form');
}

function ezacreserveer_capaciteit_form($form, &$form_state) {
  //lees beschikbare les soorten uit ezac_Reserveer_Capaciteit
  $query = db_select('ezac_Reservering_Capaciteit', 'c');
  $query->fields('c',array('id', 'periode', 'soort', 'resource', 'starts'));
  $capaciteit_lijst = $query->execute()->fetchAll();

  //lees beschikbare resources uit ezac_Reserving_Resources
  $query = db_select('ezac_Reservering_Resources', 'r');
  $query->fields('r',array('id', 'periode', 'resource', 'aantal'));
  $resources_list = $query->execute()->fetchAll();
  
  if (!empty($resources_list)) {
    foreach ($resources_list as $resource_item) {
      $resources[$resource_item->resource] = $resource_item->resource;
    }
  }
  else $resources = null;
   
  // read periodes
  $query = db_select('ezac_Rooster_Periode', 'p');
  $query->fields('p', array('id', 'periode', 'omschrijving'));
  $periodes = $query->execute()->fetchAll();
  
  if (!empty($periodes)) {
    foreach($periodes as $periode) {
      $periode_list[$periode->periode] = $periode->omschrijving;    
    }
  }
  else $periode_list['algemeen'] = 'gehele dag';

  // present in list
  // create intro
  $form[0]['#type'] = 'markup';
  $form[0]['#markup'] = '<p><h2>Instellen capaciteit</h2></p>';
  $form[0]['#markup'] .= '<p>Per soort reservering wordt het aantal te vliegen starts opgegeven';
  $form[0]['#weight'] = 0;
  
  // show existing list in table with delete checkbox or link
  // add resource per periode (dropdown) with aantal
  
  /*
  [ ] Periode A - DBO: (10)
  [ ] Periode A - VVO2: (5)
  [ ] Periode A - Solo: (15)
  [ ] Periode B - DBO: (5)
  [ ] Periode B - VVO2: (1)

  [Verwijder gemarkeerde soorten]
  
  Opgeven nieuwe soort kist
  Periode [A]
  Soort kist [        ]
  Aantal starts per periode [ ]
  
  [Maak soort aan]
  */
  
  $form['capaciteitlijst'] = array(
    '#type'  => 'fieldlist',
    '#title' => t('Capaciteit overzicht'),
    '#prefix' => '<div id="capaciteitlijst-div">',
    '#suffix' => '</div>',
    '#weight' => 1,
    '#tree' => true,
  );
  
  //build initial checkbox list
  $i = 0;
  foreach ($capaciteit_lijst as $capaciteit) {
    $periode = $capaciteit->periode;
    $resource = $capaciteit->resource;
    $starts = $capaciteit->starts;
    $soort = $capaciteit->soort;
    $form['capaciteitlijst'][$i] = array(
      '#type'  => 'checkbox',
      '#title' => "Periode $periode, $soort met $resource ($starts starts per reservering)",
      //'#value' => 0,
      '#tree' => true,
      '#weight' => 1 + ($i/100),
    );
    $form['capaciteitlijst']['resources'][$i] = array(
      '#type'  => 'hidden',
      '#value' => $capaciteit->id,
      '#tree' => true,
    );
    $i++;
  }

  $form['nr_capaciteit'] = array(
    '#type'  => 'hidden',
    '#title' => t('aantal les soorten'),
    '#value' => $i,
  );
  
  $form['remove'] = array(
    '#type'  => 'submit',
    '#value' => t(VERWIJDER_ITEM),
    '#prefix' => '<div id="verwijder-div">',
    '#suffix' => '</div>',
    '#weight' => 2,
  );
   
  // Toevoegen van een kist soort
  $form[2]['#type'] = 'markup';
  $form[2]['#markup'] = '<p><h2>Toevoegen van soort reservering</h2></p>';
  $form[2]['#markup'] .= '<p>Geef de soort reservering en aantal starts per periode</p>';
  $form[2]['#weight'] = 3;

 $form['periode'] = array(
    '#title' => t('Periode voor de reservering'),
    '#type' => 'select',
    '#options' => $periode_list,
    //'#size' => 20,
    '#default_value' => '', 
    '#description' => t('Kies de gewenste periode'),
    '#weight' => 4,
  );
 
  $form['soort'] = array(
    '#title' => t('Soort reservering'),
    '#type' => 'textfield',
    '#size' => 20,
    '#default_value' => '', 
    '#description' => t('DBO, VVO, check, solo, etc'),
    '#weight' => 5,
  );
 
 $form['resource'] = array(
    '#title' => t('Benodigde vliegtuigsoort'),
    '#type' => 'select',
    '#options' => $resources,
    //'#size' => 20,
    '#default_value' => '', 
    '#description' => t('Kies de gewenste vliegtuigsoort'),
    '#weight' => 6,
  );

  $form['starts'] = array(
    '#title' => t('aantal starts per reservering'),
    '#type' => 'textfield',
    '#size' => 2,
    '#default_value' => '', 
    '#description' => t('aantal starts wat per reservering wordt gehanteerd'),
    '#weight' => 7,
  );
  
  $form['submit'] = array(
     '#type' => 'submit',
     '#value' => t(VOEG_TOE),
     '#weight' => 9,
  );
  return $form;
}


function ezacreserveer_capaciteit_form_validate($form, &$form_state) {
  //drupal_set_message('Validate'); //debug
  $op = $form_state['values']['op'];
  
  if ($op == t(VERWIJDER_ITEM)) {
    // geen database actie?
    //drupal_set_message('Verwijderen'); //debug
    //dpm($form_state, 'form_state'); //debug
    $nr_capaciteit = $form_state['input']['nr_capaciteit'];
    for ($i=0; $i < $nr_capaciteit; $i++) {
      $id = $form_state['input']['capaciteitlijst']['resources'][$i];
      if (!empty($form_state['input']['capaciteitlijst'][$i])) {
        $checked = $form_state['input']['capaciteitlijst'][$i];
      }
      else $checked = false;
      if (!empty($form_state['input']['capaciteitlijst']) && $checked) {
        //remove resource
        $num_deleted = db_delete('ezac_Reservering_Capaciteit')
        ->condition('id', $id)
        ->execute();
        
        if ($num_deleted) {
          //@TODO naam van de kist ipv id tonen
          drupal_set_message('Soort reservering ' .$form_state['input']['capaciteitlijst']['resources'][$i] .' is verwijderd');
        }
      }
    }
    $form_state['rebuild'] = TRUE;
  }
  else { //opvoeren capaciteit
    $resource = $form_state['values']['resource'];
    if (empty($resource)) {
      form_set_error('resource', 'Geen soort vliegtuig ingevuld');
      return;
    }
    $periode = $form_state['values']['periode'];
    $starts = $form_state['values']['starts'];
    $soort = $form_state['values']['soort'];
    //verify aantal starts
    if (($starts < 1) || ($starts > 10)) {
      form_set_error('aantal', "Aantal $starts is onjuist");
      return;
    }
    
    // check whether resource already exists 
    $exists = db_select('ezac_Reservering_Capaciteit', 'c')
      ->fields('c', array('id', 'periode', 'soort', 'resource', 'starts'))
      ->condition('c.periode', $periode, '=')
      ->condition('c.soort', $soort, '=')
      ->execute()->rowCount();
      
    if ($exists > 0) {
      form_set_error('resource', "Les soort $soort bestaat al voor periode $periode");
      return;
    }
  }
  return;
}

function ezacreserveer_capaciteit_form_submit($form, &$form_state) {
  // create slot in database
  $op = $form_state['values']['op'];
  if ($op == t(VERWIJDER_ITEM)) { //verwijderen datum
    // geen database actie?
  }
  else { //opvoeren capaciteit
    $resource = $form_state['values']['resource'];
    $starts = $form_state['values']['starts'];
    $soort = $form_state['values']['soort'];
    $periode = $form_state['values']['periode']; //nog omzetten?
    $invoegen = db_insert('ezac_Reservering_Capaciteit')
    ->fields(array('periode' => $periode,
                   'soort' => $soort,
                   'resource' => $resource,
                   'starts' => $starts))
    ->execute();
    drupal_set_message("Reservering soort $soort toegevoegd");
  }
  return;
}

/**
 * Helper function to show datum
 */
function ezacreserveer_show_date($datum) {
  $dat_string = t(date('l', strtotime($datum))); // dag van de week
  $dat_string .= " " .t(date('j', strtotime($datum))); // dag zonder nul
  $dat_string .= " " .t(date('F', strtotime($datum))); // maand volledig
  $dat_string .= " " .t(date('Y', strtotime($datum))); // jaar
  return $dat_string;
}

/**
 * Invoeren reservering
 */
function _ezacreserveer_reserveer() {
  //toon lijst met beschikbare datums vanaf vandaag of eerste datum, per maand
  $datum = date('Y-m-d',strtotime('Saturday')); //next saturday
  return drupal_get_form('ezacreserveer_reserveer_form', $datum);
}


/**
 * Invoeren reservering
 * @param $form
 * @param &$form_state
 * @param $datum required date value
 * @return $form
 */
function ezacreserveer_reserveer_form($form, &$form_state, $datum) {
  global $base_url;
  global $user;
  global $cap_tabel;
  global $rsc_tabel;

  unset($date_list);
  $nextday = $datum;
  $date_list[$datum] = ezacreserveer_show_date($datum);
  if (date('l',strtotime($datum)) == 'Saturday') {
    $sunday = strtotime('Sunday', strtotime($datum));
    $nextday = date('Y-m-d', $sunday);
    $date_list[$nextday] = ezacreserveer_show_date($nextday);
  }

  //lees reserveringen uit ezac_reservering voor $datum
  $reserveringen = _ezacreserveer_retrieve('*', $datum .':' .$nextday); //datum range
  //dpm($reserveringen, 'reserveringen'); //debug
  
  foreach ($reserveringen as $res) {
    $res_tabel[$res->datum][$res->periode][$res->id] =
        array('soort' => $res->soort,
              'naam' => sprintf('%s %s %s', $res->voornaam, $res->voorvoeg, $res->achternaam),
              'doel' => $res->doel,
              'reserve' =>$res->reserve);
  }
  //dpm($res_tabel, 'res_tabel'); //debug
  
  $query = db_select('ezac_Reservering_Capaciteit', 'c');
  //$query->join('ezac_Reservering_Resources', 's', 'c.resource = s.resource');
  $query->fields('c');
  //$query->fields('s', array('aantal'));
  $capaciteit = $query->execute()->fetchAll();
  
  //unset($cap_tabel);
  foreach ($capaciteit as $capa) {
    $cap_tabel[$capa->periode][$capa->soort] =
            array(
              'resource' => $capa->resource,
              'starts' => $capa->starts,
              );
      $periode_list[$capa->periode] = $capa->periode; // for periode selection list
      $soort_list[$capa->soort] = $capa->soort; // for soort selection list
  }
  //dpm($cap_tabel, 'cap'); //debug
  
  $query = db_select('ezac_Reservering_Resources', 's');
  $query->fields('s');
  $resources = $query->execute()->fetchAll();
  //unset($rsc_tabel);
  foreach ($resources as $resource) {
    $rsc_tabel[$datum][$resource->periode][$resource->resource] =
            array(
            'aantal' => $resource->aantal,
            'gereserveerd' => 0,
            'vrij' => $resource->aantal,
            );
    $rsc_tabel[$nextday][$resource->periode][$resource->resource] =
            array(
            'aantal' => $resource->aantal,
            'gereserveerd' => 0,
            'vrij' => $resource->aantal,
            );
  }
  //dpm($rsc_tabel, 'rsc'); //debug
  
  //toon reserveringen
  $res_display = ezacreserveer_display($datum .':' .$nextday); //show weekend

  // Toon resterende capaciteit per resource
  //  Kies soort reservering uit ezac_Reservering_Capaciteit
  //   lees alle soorten
  //   bereken nog beschikbare capaciteit met ezac_Reservering_Resources
  // .. en gebruikte capaciteit uit
  // .. Resources[Capaciteit.resource].aantal - (ezac_Reservering_Reserveringen.soort * Capaciteit[soort].starts)
  
  foreach ($rsc_tabel as $datum => $rsc_datum) {
    foreach ($rsc_datum as $periode => $rsc_periode) {
      foreach ($rsc_periode as $resource => $rsc) {
        $aantal   = $rsc['aantal'];
        $vrij     = $rsc['vrij'];
        //aftrekken gereserveerde capaciteit
        if (isset($res_tabel)) {
          foreach ($res_tabel as $res_dat => $res_datum) {
            if ($res_dat == $datum) {
              foreach ($res_datum as $res_per => $res_periode) {
                foreach ($res_periode as $id => $res) {
                  $soort = $res['soort'];
                  //drupal_set_message("rsc periode:$periode, res periode:$res_per, soort:$soort, resource: $resource"); //debug
                  if ($cap_tabel[$res_per][$soort]['resource'] == $resource) {
                    $starts = $cap_tabel[$res_per][$soort]['starts'];
                    $rsc['gereserveerd'] = $rsc['gereserveerd'] + $starts;
                    $rsc['vrij'] = $rsc['vrij'] - $starts;
                    if ($rsc['vrij'] < 0) $rsc['vrij'] = 0;
                  }
                }
              }
            }
          }
        }
        $rsc_tabel[$datum][$periode][$resource]['gereserveerd'] =$rsc['gereserveerd'];
        $rsc_tabel[$datum][$periode][$resource]['vrij'] = $rsc['vrij'];
      }
    }
  }
  $form[10]['#type'] = 'markup';
  $form[10]['#markup'] = "<h3>Nog beschikbare capaciteit</h3>";
  $form[10]['#weight'] = 10;
  $form[10]['#prefix'] = '<div class="ezacreserveer-intro-div">';
  $form[10]['#suffix'] = '</div>';

  //  table header
  // Table tag attributes
  $attributes = array(
    'border'      => 1,
    'cellspacing' => 0,
    'cellpadding' => 5,
    'width'	  => '90%');

  //Set up the table Headings
  $header = array(
    array('data' => t('Datum')),
    array('data' => t('Periode')),
    array('data' => t('Soort kist')),
    array('data' => t('Maximaal<br>aantal starts')),
    array('data' => t('Gereserveerde<br>starts')),
    array('data' => t('Nog<br>beschikbaar')),
  );

  foreach ($rsc_tabel as $datum => $rsc_datum) {
    foreach ($rsc_datum as $periode => $rsc_periode) {
      foreach ($rsc_periode as $resource => $rsc) {
        // table rows
        $row[] = array(
          ezacreserveer_show_date($datum),
          $periode,
          $resource,
          $rsc['aantal'],
          $rsc['gereserveerd'],
          $rsc['vrij'],
        );
      }
    }
  }
  
  $form[2]['#theme'] = 'table';
  $form[2]['#attributes'] = $attributes;
  $form[2]['#header'] = $header;
  $form[2]['#rows'] = (isset($row)) ? $row : null;
  $form[2]['#empty'] = t('Geen gegevens beschikbaar');
  $form[2]['#weight'] = 11;
  
  // Bepaal leden_id ingelogde gebruiker
  $query = db_select('ezac_Leden', 'l');
  $query->condition('l.user', $user->name, '=');
  $query->fields('l', array('id'));
  $leden_id = $query->execute()->fetchColumn();
  //@TODO check invalid $leden_id
  $form['leden_id'] = array(
    '#type' => 'hidden',
    '#value' => $leden_id,
  );

  //@TODO datum kiezen
  /*
  $form['datum'] = array(
    '#type' => 'hidden',
    '#value' => $datum,
  ); */
  $form['datum'] = array(
    '#title' => t('Datum'),
    '#type' => 'select',
    '#options' => $date_list,
    '#description' => 'Selecteer de datum voor je reservering',
    '#weight' => 19,
  );

  $form['periode'] = array(
    '#type' => 'select',
    '#title' => t('Periode'),
    '#options' => $periode_list,
    '#description' => t('Kies een periode'),
    '#weight' => 20,
  );
  
  $form['soort'] = array(
    '#type' => 'select',
    '#title' => t('Soort reservering'),
    '#options' => $soort_list,
    '#description' => t('Kies een soort reservering'),
    '#weight' => 21,
  );
  
  $form['doel'] = array(
  '#title' => t('Doel van de reservering'),
  '#type' => 'textfield',
//  '#default_value' => substr($start['start'], 0, 5),
  '#description' => t('Welk doel heeft de reservering?'),
  '#maxlength' => 20,
  '#required' => TRUE,
  '#size' => 20,
    '#weight' => 22,
  );
  
  $form['submit'] = array(
  '#type' => 'submit',
  '#value' => t('Plaats reservering'),
  '#weight' => 99,
  '#prefix' => '<div class="reserveer-submit-div">',
  '#suffix' => '</div>',
  );
  
  //dpm($res_display, 'res display'); //debug
  //dpm($form); //debug
  $form = array_merge($res_display, $form);
  return $form;
}

function ezacreserveer_reserveer_form_validate($form, &$form_state) {
  global $cap_tabel;
  global $rsc_tabel;
  //dpm($rsc_tabel, 'rsc'); //debug
  //dpm($cap_tabel, 'cap'); //debug
  //dpm($form_state, 'form_state');  //debug
  //@TODO validate nog te bouwen
  //check valid field values
  //verify capacity
  //$rsc_tabel = $form_state['values']['resources'];
  //$cap_tabel = $form_state['values']['capaciteit'];
  $datum = $form_state['values']['datum'];
  $periode = $form_state['values']['periode'];
  $soort = $form_state['values']['soort'];
  $leden_id = $form_state['values']['leden_id'];
  $doel = $form_state['values']['doel'];
  if (isset($cap_tabel[$periode][$soort])) {
    $resource = $cap_tabel[$periode][$soort]['resource'];
    if ($rsc_tabel[$datum][$periode][$resource]['vrij'] < $cap_tabel[$periode][$soort]['starts']) {
      //drupal_set_message("Onvoldoende capaciteit beschikbaar voor $soort op $resource");
      form_set_error('soort', "Onvoldoende capaciteit beschikbaar voor $soort op $resource");
      $form_state['values']['reserve'] = 1; //plaats op wachtlijst
      $form_state['rebuild'] = TRUE;
    }
    else {
      $form_state['values']['reserve'] = 0;
    }
  }
  else {
    form_set_error('soort', "$soort in de $periode periode kan niet worden gereserveerd");
  }
}

function ezacreserveer_reserveer_form_submit($form, &$form_state) {
  $CRLF = '\r\n';
  
  // vastleggen reservering
  global $user;
  global $base_url;
  $datum = $form_state['values']['datum'];
  $periode = $form_state['values']['periode'];
  $soort = $form_state['values']['soort'];
  $leden_id = $form_state['values']['leden_id'];
  $doel = $form_state['values']['doel'];
  $reserve = $form_state['values']['reserve'];
  
  //zoek mail adres voor user
  $query = db_select('ezac_Leden', 'l');
  $query->fields('l', array('e_mail', 'voornaam', 'voorvoeg', 'achternaam'));
  $query->condition('l.user', $user->name, '=');
  $lid = $query->execute()->fetchAll();
  $email = $lid[0]->e_mail;
  $naam = sprintf('%s %s %s', $lid[0]->voornaam, $lid[0]->voorvoeg, $lid[0]->achternaam);

  $fields = array(
    'datum' => $datum,
    'periode' => $periode,
    'soort' => $soort,
    'leden_id' => $leden_id,
    'doel' => $doel,
    'reserve' => $reserve,
    );

  $id = db_insert('ezac_Reservering_Reserveringen')
  ->fields($fields)
  ->execute();

  drupal_set_message("Instructie $soort is gereserveerd voor de $periode periode op $datum");
  
  // versturen bevestiging met link en sleutel voor wijziging / annulering
  //   aanmaken sleutel met hash functie
  $hash_fields = array(
    'id' => $id,
    'datum' => $datum,
    'periode' => $periode,
    'soort' => $soort,
    'leden_id' => $leden_id,
    );
  $data = implode('/', $hash_fields);
  $hash = drupal_hash_base64($data);

  // passagiers/edit/id/datum/tijd/naam/telefoon/hash
  $url_verwijderen = $base_url ."/reservering/delete/$id/$hash";
  $show_datum = ezacreserveer_show_date($datum);
  $subject = "Reservering $soort instructie EZAC op $show_datum in de $periode periode";
  unset($body);
  $body  = "<html><body>";
  $body .= "<p>Er is voor $naam een reservering voor $soort instructie bij de EZAC aangemaakt";
  $body .= "<br>";
  $body .= "<br>De reservering is voor $show_datum in de $periode periode";
  $body .= "<br>";
  $body .= "<br>Mocht het niet mogelijk zijn hiervan gebruik te maken, dan kan deze reservering";
  $body .= "<br>via <a href=$url_verwijderen>DEZE LINK</a> worden geannuleerd ";
  $body .= "<br>";
  $body .= "<br>Met vriendelijke groet,";
  $body .= "<br>Eerste Zeeuws Vlaamse Aero Club";
  $body .= "</body></html>";
  //   Genereren PDF
  //   Mailen PDF als attachment of download via button
  _ezacreserveer_mail($email, $subject, $body);
  
  //drupal_set_message("Reservering $id aangemaakt met code $hash", 'status');

  // toon bevestiging
  $form_state['redirect'] = "reservering";
}

/**
 *Delete reservering record
 *@param $id id of Reserveer record
 *@param $hash sha256 hash over Reserveer fields
 */
function _ezacreserveer_delete($id, $hash) {
  // $hash ingevuld?
  if (!isset($hash) || empty($hash)) {
    drupal_set_message("Code voor reservering $id ontbreekt", 'error');
    drupal_goto('reservering/reservering');
  }
  // read reservering record
  $reserveringen = db_select('ezac_Reservering_Reserveringen', 'p')
  ->fields('p') //select *
  ->condition('p.id', $id, '=')
  ->execute()
  ->fetchAll();
  
  if (count($reserveringen) == 0) {
    drupal_set_message("Reservering $id niet gevonden", 'error');
    drupal_goto('reservering/reservering');
  }

  $reservering = $reserveringen[0]; //get single result
  
  $datum    = substr($reservering->datum, 0,10);
  $periode  = $reservering->periode;
  $soort    = $reservering->soort;
  $leden_id = $reservering->leden_id;
  
  $hash_fields = array(
  'id' => $id,
  'datum' => $datum,
  'periode' => $periode,
  'soort' => $soort,
  'leden_id' => $leden_id,
  );
  $data = implode('/', $hash_fields);

  $calculated_hash = drupal_hash_base64($data);
  if ($calculated_hash <> $hash) {
    drupal_set_message("Onjuiste code voor reservering $id", 'error');
    drupal_set_message("calculated - $calculated_hash", 'error');
    drupal_set_message("received   - $hash", 'error');
    drupal_goto('reservering/reservering');
  }
  return drupal_get_form('ezacreserveer_delete_form', $reservering);
}

/**
* Verification for Passagier delete function
* @param form
* @param &$form_state
* @param stdObject $reservering id datum tijd naam mail telefoon
*/
function ezacreserveer_delete_form($form = NULL, &$form_state, $reservering) {
  // build form for passagier edit
  // velden: id datum tijd naam telefoon mail aangemaakt aanmaker soort
  $id = $reservering->id;
  $datum = substr($reservering->datum, 0, 10);
  $periode = $reservering->periode;
  $leden_id = $reservering->leden_id;
  $soort = $reservering->soort;
  $doel = $reservering->doel;
  $show_datum = ezacreserveer_show_date($datum);

  //opzoeken leden record
  $query = db_select('ezac_Leden', 'l')
  ->condition('l.id', $leden_id, '=')
  ->fields('l', array('voornaam', 'voorvoeg', 'achternaam', 'e_mail'));
  $li = $query->execute()->fetchAll();
  if (isset($li[0])) {
    $naam = sprintf("%s %s %s", $li[0]->voornaam, $li[0]->voorvoeg, $li[0]->achternaam);
    $email = $li[0]->e_mail;
  }
  else $naam = "naam onbekend";
  
  $form[0]['#type'] = 'markup';
  $form[0]['#markup'] = '<p>Verwijderen reservering></p>';
  $form[0]['#weight'] = 0;
  $form[0]['#prefix'] = '<div class="ezacreserveer-intro-div">';
  $form[0]['#suffix'] = '</div>';
   
  $form[0]['#type'] = 'markup';
  $form[0]['#markup'] = "<p><h3>$soort reservering van $show_datum $tijd verwijderen</h3></p>";
  $form[0]['#markup'] .= "<p>Deze reservering is gemaakt voor $naam in de $periode periode";
  $form[0]['#markup'] .= "<br>met als doel $doel";
  $form[0]['#weight'] = 1;
  $form[0]['#prefix'] = '<div class="ezacreserveer-delete-div">';
  $form[0]['#suffix'] = '</div>';
  
  $form['id'] = array(
  '#title' => 'id',
  '#type' => 'hidden',
  '#value'=> $id
  );
  $form['datum'] = array(
  '#title' => 'Datum',
  '#type' => 'hidden',
  '#value' => $datum,
  );
  $form['soort'] = array(
  '#title' => 'Soort',
  '#type' => 'hidden',
  '#value' => $soort,
  );
  $form['periode'] = array(
  '#title' => 'Periode',
  '#type' => 'hidden',
  '#value' => $periode,
  );
  $form['doel'] = array(
  '#title' => 'Doel',
  '#type' => 'hidden',
  '#value' => $doel,
  );
  $form['naam'] = array(
  '#title' => 'Naam',
  '#type' => 'hidden',
  '#value' => $naam,
  );
  $form['mail'] = array(
  '#title' => 'E-mail',
  '#type' => 'hidden',
  '#value' => $email,
  );
  
  $form['submit'] = array(
  '#type' => 'submit',
  '#value' => t('Verwijder reservering'),
  '#weight' => 3,
  );

  $form['annuleer'] = array(
  '#type' => 'submit',
  '#value' => t('Annuleer'),
  '#weight' => 4,
  );
  
  return $form;
}


/**
* Validate the form.
*/
function ezacreserveer_delete_form_validate($form, &$form_state) {
  //empty
}

/**
* Handle post-validation form submission.
*/
function ezacreserveer_delete_form_submit($form, &$form_state) {
  $op = $form_state['values']['op'];
  if ($op == 'Annuleer') {
      $form_state['redirect'] = 'reservering/reservering';
      drupal_set_message("Reservering is NIET verwijderd", 'status');
      return;
  }

  global $base_url;
  $id    = $form_state['values']['id'];
  $datum = ezacreserveer_show_date($form_state['values']['datum']);
  $naam  = $form_state['values']['naam'];
  $soort = $form_state['values']['soort'];
  $periode = $form_state['values']['periode'];
  $doel = $form_state['values']['doel'];
  $email = $form_state['values']['mail'];
  
  $result = db_delete('ezac_Reservering_Reserveringen')
  ->condition('id', $id)
  ->execute();

  if ($result == 1) {
    drupal_set_message("Reservering $id is verwijderd", 'status');
    //mail bevestiging van verwijdering 
    $url_reservering = $base_url ."/reservering";
    $subject = "Reservering $doel bij EZAC op $datum is GEANNULEERD";
    unset($body);
    $body  = "<html><body>";
    $body .= "<p>De reservering voor $soort bij de EZAC voor $naam op $datum in de $periode periode is geannuleerd";
    $body .= "<br>";
    $body .= "<br>Via <a href=$url_reservering>DEZE LINK</a> kan een nieuwe reservering worden gemaakt";
    $body .= "<br>";
    $body .= "<br>Voor verdere contact gegevens: zie de <a href=http://www.ezac.nl>EZAC website</a>";
    $body .= "<br>";
    $body .= "<br>Met vriendelijke groet,";
    $body .= "<br>Eerste Zeeuws Vlaamse Aero Club";
    $body .= "</body></html>";
    _ezacreserveer_mail($email, $subject, $body);
  }
  else drupal_set_message("Reservering $id is NIET verwijderd", 'error');
  $form_state['redirect'] = 'reservering/reservering';
  return;  
}

/**
 * Verwijder reservering via website (ingelogd)
 * @param $id
 */
function _ezacreserveer_verwijder($id) {
  return drupal_get_form('ezacreserveer_verwijder_form', $id);  
}

function ezacreserveer_verwijder_form($form, &$form_state, $id) {
  global $user;
  
  //@TODO delete mag alleen door instructeur
  
  $reservering = db_select('ezac_Reservering_Reserveringen', 'p')
  ->fields('p')
  ->condition('p.id', $id, '=')
  ->execute()
  ->fetchAll();
  if (count($reservering) <> 1) {
    drupal_set_message("Reservering $id niet gevonden", 'error');
    drupal_goto('passagiers');
  }
  $periode = $reservering[0]->periode;
  $soort   = $reservering[0]->soort;
  $lid_id  = $reservering[0]->leden_id;
  
  $lid = db_select('ezac_Leden', 'l')
  ->fields('l', array('voornaam', 'voorvoeg', 'achternaam', 'e_mail'))
  ->condition('l.id', $lid_id, '=')
  ->execute()
  ->fetchAll();
  if (isset($lid[0])) {
    $naam = sprintf('%s %s %s', $lid[0]->voornaam, $lid[0]->voorvoeg, $lid[0]->achternaam);
    $email = $lid[0]->e_mail;
  }
  else {
    $naam = 'onbekend';
  }
  
  $form['naam'] = array(
    '#type' => 'hidden',
    '#value' => $naam,
  );
  
  $form['email'] = array(
    '#type' => 'hidden',
    '#value' => $email,
  );
  $datum = ezacreserveer_show_date($reservering[0]->datum);
    
  $form[0]['#type'] = 'markup';
  $form[0]['#markup'] = "<p><h2>Verwijderen reservering $id</h2></p>";
  $form[0]['#weight'] = 0;
  $form[0]['#prefix'] = '<div class="ezacreserveer-intro-div">';
  $form[0]['#suffix'] = '</div>';
  
  $form[1]['#type'] = 'markup';
  $form[1]['#markup'] = "<p>Datum: $datum in de $periode periode";
  $form[1]['#markup'] .= "<br>Naam: $naam";
  $form[1]['#markup'] .= "<br>Soort: $soort";
  $form[1]['#markup'] .= "<br>E-mail: $email</p>";
  $form[1]['#weight'] = 1;

  // Eventueel kan hier nog een reden voor de annulering worden gevraagd
  // Deze kan dan in de mail worden meegezonden

  $form['reden']['#type'] = 'textfield';
  $form['reden']['#title'] = 'Geef de reden voor de annulering';
  $form['reden']['#maxlength'] = 30;
  $form['reden']['#size'] = 30;
  $form['reden']['#weight'] = 2;
  
  $form[2]['#type'] = 'markup';
  $form[2]['#markup'] = "<p><h2>Verwijder de reservering alleen als de leerling is geinformeerd</h2>";
  $form[2]['#prefix'] = '<div class="ezacreserveer-intro-div">';
  $form[2]['#suffix'] = '</div>';
  $form[2]['#weight'] = 3;

  $form['id'] = array(
    '#type'=> 'hidden',
    '#value'=> $id,
  );
  
  $form['remove'] = array(
  '#type'  => 'submit',
  '#value' => t('Verwijder reservering'),
  '#weight' => 4,
  );
  
  $form['cancel'] = array(
  '#type'  => 'submit',
  '#value' => t('Annuleren'),
  '#weight' => 5,
  );
  return $form;
}

function ezacreserveer_verwijder_form_submit($form, &$form_state) {
  
  if ($form_state['values']['op'] == 'Verwijder reservering') {
    $id = $form_state['values']['id'];
    $reden = $form_state['values']['reden'];
    $naam = $form_state['values']['naam'];
    $email = $form_state['values']['email'];
    _ezacreserveer_verwijderen($id, $reden, $naam, $email);
  }
  else {
    drupal_set_message("Geen reservering verwijderd", 'status');
  }
    
  $form_state['redirect'] = 'reservering';
  return;
}
/**
 * Verwijder een reservering
 * $param $id id of reservering
 * $param $reden reden van annulering
 */
function _ezacreserveer_verwijderen($id, $reden, $naam, $email) {
  global $base_url;
  //lees record
  $reservering = db_select('ezac_Reservering_Reserveringen', 'p')
  ->fields('p')
  ->condition('p.id', $id, '=')
  ->execute()
  ->fetchAll();
  
  $result = db_delete('ezac_Reservering_Reserveringen')
  ->condition('id', $id)
  ->execute();
  if ($result == 1) {
    drupal_set_message("Reservering $id is verwijderd", 'status');
    //@TODO schrijf verwijderde reservering in een ezac_Reservering_verwijderd
  }
  else {
    drupal_set_message("Reservering $id is NIET verwijderd ($result)", 'error');
  }
  // Stuur bericht van verwijdering naar passagier
  if (isset($email)) {
    $datum = ezacreserveer_show_date($reservering[0]->datum);
    $periode = $reservering[0]->periode;
    $soort = $reservering[0]->soort;
    $subject = "Je reservering voor $soort instructie op $datum bij de EZAC is vervallen";
    $body = "<p>Beste $naam,";
    $body .= "<br>Je reservering voor $soort instructie bij de EZAC op $datum in de $periode periode is helaas vervallen";
    if (!empty($reden)) {
      $body .= "<BR>De reden hiervoor is: $reden";
    }
    $body .= "<br>";
    $body .= "<br>Om een nieuwe reservering te maken kun je ";
    $body .= "<a href=$base_url/reservering>DEZE LINK</a> gebruiken";
    $body .= "<br>";
    $body .= "<br>Met vriendelijke groet,";
    $body .= "<br>Eerste Zeeuws Vlaamse Aero Club";
    _ezacreserveer_mail($email, $subject, $body);
  }
}

/**
 * Reserveringen dit jaar
 **/
function _ezacreserveer_dag() {
  $datum = date('Y-m-d');
  return ezacreserveer_display($datum);
}

/**
 * Reserveringen vandaag
 **/
function _ezacreserveer_jaar() {
  $datum = date('Y');
  return ezacreserveer_display($datum);
}

/**
 * Reserveringen deze maand
 * @TODO: generiek maken van keuze voor dag, maand en jaar in display form
 */
function _ezacreserveer_maand() {
  $datum = date('Y-m');
  return ezacreserveer_display($datum);
}
function ezacreserveer_display($datum) {
  global $base_url;
  global $user;
  // Check permission for delete
  $may_delete = user_access('ezac_res_delete');
  
  $query = db_select('ezac_Leden', 'l')
  ->condition('l.user', $user->name, '=')
  ->fields('l', array('id', 'user'));
  $li = $query->execute()->fetchAll();
  if (isset($li[0])) {
    $lid_id = $li[0]->id;
  }
  //lees reserveringen vanaf $datum
  $reserveringen = _ezacreserveer_retrieve('*', $datum);
  $dat = explode(':', $datum);
  $ds = ezacreserveer_show_date($dat[0]);
  if (isset($dat[1])) {
    $ds .= ' - ' .ezacreserveer_show_date($dat[1]);
  }
  //$dat = ezacreserveer_show_date($datum);
  $form[0]['#type'] = 'markup';
  //$form[0]['#markup'] = "<h3>Instructie reserveringen voor $dat</h2>";
  $form[0]['#markup'] = "<h3>Instructie reserveringen voor $ds</h3>";
  $form[0]['#weight'] = 0;
  $form[0]['#prefix'] = '<div class="ezacreserveer-intro-div">';
  $form[0]['#suffix'] = '</div>';
  

  $form[1]['#type'] = 'markup';
  $form[1]['#markup'] = "<p>Klik op de naam om een reservering te verwijderen</p>";
  $form[1]['#weight'] = 1;
  //  $form[0]['#prefix'] = '<div class="ezacreserveer-intro-div">';
  //  $form[0]['#suffix'] = '</div>';

  //  table header
  // Table tag attributes
  $attributes = array(
    'border'      => 1,
    'cellspacing' => 0,
    'cellpadding' => 5,
    'width'	  => '90%');

  //Set up the table Headings
  $header = array(
    array('data' => t('Datum')),
    array('data' => t('Periode')),
    array('data' => t('Soort')),
    array('data' => t('Naam')),
    array('data' => t('Doel')),
    array('data' => t('Wachtlijst')),
  );

  foreach ($reserveringen as $reservering) {
    $id = $reservering->id;
    $datum = substr($reservering->datum, 0, 10); //skip seconds part
    $wachtlijst = ($reservering->reserve == 1) ? "Ja" : "";
    $leden_id = $reservering->leden_id;
    $naam = sprintf('%s %s %s', $reservering->voornaam,$reservering->voorvoeg, $reservering->achternaam);
    $doel = $reservering->doel;
    $periode = $reservering->periode;
    $soort = $reservering->soort;
    if ($may_delete || ($leden_id == $lid_id)) {
      $naam_link = "<a href=$base_url/reservering/verwijder/$id>$naam</a>";
    }
    else $naam_link = $naam;
    // table rows
    $row[] = array(
      ezacreserveer_show_date($reservering->datum),
      $periode,
      $soort,
      $naam_link,
      $doel,
      $wachtlijst,
    );
  }
  $form[2]['#theme'] = 'table';
  $form[2]['#attributes'] = $attributes;
  $form[2]['#header'] = $header;
  $form[2]['#rows'] = (isset($row)) ? $row : null;
  $form[2]['#empty'] = t('Geen gegevens beschikbaar');
  $form[2]['#weight'] = 2;
  return $form;  

}

/**
 * Send a simple email to specified recipient.
 *
 * @param string $message_subject
 * @param string $message_body
 */
function _ezacreserveer_mail($to, $message_subject, $message_body) {
  $my_email = 'webmaster@ezac.nl';
  
  // These value can remain empty.
  $my_module = 'ezacreserveer';
  $my_mail_token = 'reservering';
  
  $from = variable_get('system_mail', $my_email);
  $message = array(
    'id' => $my_module . '_' . $my_mail_token,
    'module' => $my_module, // evert
    'key' => $my_mail_token, //evert
    'to' => $to,
    'from' => $my_email,
    'subject' => $message_subject,
    'body' => array($message_body),
    'headers' => array(
      'From' => $from,
      'Sender' => $from,
      'Bcc' => $my_email, //door Evert toegevoegd
      'Return-Path' => $from,
      'MIME-Version' => '1.0',
      'Content-Type' => 'text/html; charset=UTF-8; format=flowed; delsp=yes',
      'Content-Transfer-Encoding' => '8Bit',
      'X-Mailer' => 'Drupal',
    ),
  );
  $system = drupal_mail_system($my_module, $my_mail_token);  

// The format function must be called before calling the mail function. 
  $message = $system->format($message);
  //dpm($message, 'formatted message'); // debug
  if ($system->mail($message)) {
    //drupal_set_message("Mail verzonden naar $to");
  }
  else {
    drupal_set_message("Mail verzending naar $to [$message_subject] mislukt", 'error');
  }
}